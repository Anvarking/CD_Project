apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: monitoring
data:
  vector.yaml: |
    # Источник логов: сбор логов из Kubernetes
    sources:
      kubernetes_logs:
        type: kubernetes_logs
        self_node_name: "{{ HOSTNAME }}" # Убедитесь, что эта строка присутствует

    # Преобразование логов
    transforms:
      app_logs_parser:
        type: remap
        inputs:
          - kubernetes_logs
        source: |
          # Собираем логи ТОЛЬКО из неймспейса argocd (это теперь включает ваше новое приложение)
          if .kubernetes.namespace_name == "argocd" {
            msg_str = to_string(.message) ?? ""
            if starts_with(msg_str, "{") && ends_with(msg_str, "}") {
              parsed = parse_json(msg_str) ?? null
              if parsed != null {
                . = merge!(., parsed)
                del(.message)
              }
            }
            # Добавляем стандартные лейблы из K8s, которые могут быть полезны
            .kubernetes.container_name = .kubernetes.container_name
            .kubernetes.app_name = .kubernetes.pod_labels."app.kubernetes.io/name" || .kubernetes.pod_labels."app"
            .kubernetes.instance = .kubernetes.pod_labels."app.kubernetes.io/instance"

            # Лейблы для Loki
            .loki.kubernetes_namespace = .kubernetes.namespace_name
            .loki.kubernetes_pod = .kubernetes.pod_name
            .loki.kubernetes_container = .kubernetes.container_name
            .loki.app_name = .kubernetes.app_name # Будет time-app или argocd-server/dex и т.д.
            .loki.instance = .kubernetes.instance
            .loki.level = .level || "info"
          } else {
            abort # Отбрасываем все остальные неймспейсы
          }

    # Назначение: отправка логов в Loki
    sinks:
      loki_sink:
        type: loki
        inputs:
          - app_logs_parser # Убедитесь, что здесь используется правильное имя transform
        endpoint: http://loki-stack.monitoring.svc.cluster.local:3100
        encoding:
          codec: json
        labels:
          job: kubernetes-pods
          host: "{{ HOSTNAME }}"
          namespace: "{{ kubernetes.namespace_name }}"
          pod: "{{ kubernetes.pod_name }}"
          container: "{{ kubernetes.container_name }}"
          app_name: "{{ kubernetes.app_name }}"
          instance: "{{ kubernetes.instance }}"
          component: "{{ kubernetes.container_name }}"
        remove_label_fields: true